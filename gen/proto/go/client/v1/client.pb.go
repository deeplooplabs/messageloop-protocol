// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: client/v1/client.proto

package clientv1

import (
	v1 "github.com/deeplooplabs/messageloop-protocol/gen/proto/go/shared/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientMessage struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata map[string]string      `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Time     uint64                 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are valid to be assigned to Envelope:
	//
	//	*ClientMessage_Connect
	//	*ClientMessage_Subscribe
	//	*ClientMessage_Unsubscribe
	//	*ClientMessage_RpcRequest
	//	*ClientMessage_Ping
	//	*ClientMessage_Publish
	//	*ClientMessage_SubRefresh
	Envelope      isClientMessage_Envelope `protobuf_oneof:"envelope"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	mi := &file_client_v1_client_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{0}
}

func (x *ClientMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientMessage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClientMessage) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ClientMessage) GetEnvelope() isClientMessage_Envelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

func (x *ClientMessage) GetConnect() *Connect {
	if x != nil {
		if x, ok := x.Envelope.(*ClientMessage_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *ClientMessage) GetSubscribe() *Subscribe {
	if x != nil {
		if x, ok := x.Envelope.(*ClientMessage_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *ClientMessage) GetUnsubscribe() *Unsubscribe {
	if x != nil {
		if x, ok := x.Envelope.(*ClientMessage_Unsubscribe); ok {
			return x.Unsubscribe
		}
	}
	return nil
}

func (x *ClientMessage) GetRpcRequest() *RPCRequest {
	if x != nil {
		if x, ok := x.Envelope.(*ClientMessage_RpcRequest); ok {
			return x.RpcRequest
		}
	}
	return nil
}

func (x *ClientMessage) GetPing() *Ping {
	if x != nil {
		if x, ok := x.Envelope.(*ClientMessage_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *ClientMessage) GetPublish() *Publish {
	if x != nil {
		if x, ok := x.Envelope.(*ClientMessage_Publish); ok {
			return x.Publish
		}
	}
	return nil
}

func (x *ClientMessage) GetSubRefresh() *SubRefresh {
	if x != nil {
		if x, ok := x.Envelope.(*ClientMessage_SubRefresh); ok {
			return x.SubRefresh
		}
	}
	return nil
}

type isClientMessage_Envelope interface {
	isClientMessage_Envelope()
}

type ClientMessage_Connect struct {
	Connect *Connect `protobuf:"bytes,11,opt,name=connect,proto3,oneof"`
}

type ClientMessage_Subscribe struct {
	Subscribe *Subscribe `protobuf:"bytes,12,opt,name=subscribe,proto3,oneof"`
}

type ClientMessage_Unsubscribe struct {
	Unsubscribe *Unsubscribe `protobuf:"bytes,13,opt,name=unsubscribe,proto3,oneof"`
}

type ClientMessage_RpcRequest struct {
	RpcRequest *RPCRequest `protobuf:"bytes,14,opt,name=rpc_request,proto3,oneof"`
}

type ClientMessage_Ping struct {
	Ping *Ping `protobuf:"bytes,15,opt,name=ping,proto3,oneof"`
}

type ClientMessage_Publish struct {
	Publish *Publish `protobuf:"bytes,16,opt,name=publish,proto3,oneof"`
}

type ClientMessage_SubRefresh struct {
	SubRefresh *SubRefresh `protobuf:"bytes,17,opt,name=sub_refresh,proto3,oneof"`
}

func (*ClientMessage_Connect) isClientMessage_Envelope() {}

func (*ClientMessage_Subscribe) isClientMessage_Envelope() {}

func (*ClientMessage_Unsubscribe) isClientMessage_Envelope() {}

func (*ClientMessage_RpcRequest) isClientMessage_Envelope() {}

func (*ClientMessage_Ping) isClientMessage_Envelope() {}

func (*ClientMessage_Publish) isClientMessage_Envelope() {}

func (*ClientMessage_SubRefresh) isClientMessage_Envelope() {}

type ServerMessage struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata map[string]string      `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Time     uint64                 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are valid to be assigned to Envelope:
	//
	//	*ServerMessage_Error
	//	*ServerMessage_Connected
	//	*ServerMessage_SubscribeAck
	//	*ServerMessage_UnsubscribeAck
	//	*ServerMessage_RpcReply
	//	*ServerMessage_Pong
	//	*ServerMessage_PublishAck
	//	*ServerMessage_Publication
	//	*ServerMessage_SubRefreshAck
	Envelope      isServerMessage_Envelope `protobuf_oneof:"envelope"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	mi := &file_client_v1_client_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{1}
}

func (x *ServerMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerMessage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ServerMessage) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ServerMessage) GetEnvelope() isServerMessage_Envelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

func (x *ServerMessage) GetError() *v1.Error {
	if x != nil {
		if x, ok := x.Envelope.(*ServerMessage_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *ServerMessage) GetConnected() *Connected {
	if x != nil {
		if x, ok := x.Envelope.(*ServerMessage_Connected); ok {
			return x.Connected
		}
	}
	return nil
}

func (x *ServerMessage) GetSubscribeAck() *SubscribeAck {
	if x != nil {
		if x, ok := x.Envelope.(*ServerMessage_SubscribeAck); ok {
			return x.SubscribeAck
		}
	}
	return nil
}

func (x *ServerMessage) GetUnsubscribeAck() *UnsubscribeAck {
	if x != nil {
		if x, ok := x.Envelope.(*ServerMessage_UnsubscribeAck); ok {
			return x.UnsubscribeAck
		}
	}
	return nil
}

func (x *ServerMessage) GetRpcReply() *RPCReply {
	if x != nil {
		if x, ok := x.Envelope.(*ServerMessage_RpcReply); ok {
			return x.RpcReply
		}
	}
	return nil
}

func (x *ServerMessage) GetPong() *Pong {
	if x != nil {
		if x, ok := x.Envelope.(*ServerMessage_Pong); ok {
			return x.Pong
		}
	}
	return nil
}

func (x *ServerMessage) GetPublishAck() *PublishAck {
	if x != nil {
		if x, ok := x.Envelope.(*ServerMessage_PublishAck); ok {
			return x.PublishAck
		}
	}
	return nil
}

func (x *ServerMessage) GetPublication() *Publication {
	if x != nil {
		if x, ok := x.Envelope.(*ServerMessage_Publication); ok {
			return x.Publication
		}
	}
	return nil
}

func (x *ServerMessage) GetSubRefreshAck() *SubRefreshAck {
	if x != nil {
		if x, ok := x.Envelope.(*ServerMessage_SubRefreshAck); ok {
			return x.SubRefreshAck
		}
	}
	return nil
}

type isServerMessage_Envelope interface {
	isServerMessage_Envelope()
}

type ServerMessage_Error struct {
	Error *v1.Error `protobuf:"bytes,11,opt,name=error,proto3,oneof"`
}

type ServerMessage_Connected struct {
	Connected *Connected `protobuf:"bytes,12,opt,name=connected,proto3,oneof"`
}

type ServerMessage_SubscribeAck struct {
	SubscribeAck *SubscribeAck `protobuf:"bytes,13,opt,name=subscribe_ack,proto3,oneof"`
}

type ServerMessage_UnsubscribeAck struct {
	UnsubscribeAck *UnsubscribeAck `protobuf:"bytes,14,opt,name=unsubscribe_ack,proto3,oneof"`
}

type ServerMessage_RpcReply struct {
	RpcReply *RPCReply `protobuf:"bytes,15,opt,name=rpc_reply,proto3,oneof"`
}

type ServerMessage_Pong struct {
	Pong *Pong `protobuf:"bytes,16,opt,name=pong,proto3,oneof"`
}

type ServerMessage_PublishAck struct {
	PublishAck *PublishAck `protobuf:"bytes,17,opt,name=publish_ack,proto3,oneof"`
}

type ServerMessage_Publication struct {
	Publication *Publication `protobuf:"bytes,18,opt,name=publication,proto3,oneof"`
}

type ServerMessage_SubRefreshAck struct {
	SubRefreshAck *SubRefreshAck `protobuf:"bytes,19,opt,name=sub_refresh_ack,proto3,oneof"`
}

func (*ServerMessage_Error) isServerMessage_Envelope() {}

func (*ServerMessage_Connected) isServerMessage_Envelope() {}

func (*ServerMessage_SubscribeAck) isServerMessage_Envelope() {}

func (*ServerMessage_UnsubscribeAck) isServerMessage_Envelope() {}

func (*ServerMessage_RpcReply) isServerMessage_Envelope() {}

func (*ServerMessage_Pong) isServerMessage_Envelope() {}

func (*ServerMessage_PublishAck) isServerMessage_Envelope() {}

func (*ServerMessage_Publication) isServerMessage_Envelope() {}

func (*ServerMessage_SubRefreshAck) isServerMessage_Envelope() {}

type Connect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,proto3" json:"client_id,omitempty"`
	ClientType    string                 `protobuf:"bytes,2,opt,name=client_type,proto3" json:"client_type,omitempty"`
	Token         string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Version       string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Subscriptions []*Subscription        `protobuf:"bytes,5,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connect) Reset() {
	*x = Connect{}
	mi := &file_client_v1_client_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connect) ProtoMessage() {}

func (x *Connect) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connect.ProtoReflect.Descriptor instead.
func (*Connect) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{2}
}

func (x *Connect) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Connect) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *Connect) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Connect) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Connect) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type RPCRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	PayloadBlob   []byte                 `protobuf:"bytes,4,opt,name=payload_blob,proto3" json:"payload_blob,omitempty"`
	PayloadText   string                 `protobuf:"bytes,5,opt,name=payload_text,proto3" json:"payload_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RPCRequest) Reset() {
	*x = RPCRequest{}
	mi := &file_client_v1_client_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCRequest) ProtoMessage() {}

func (x *RPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCRequest.ProtoReflect.Descriptor instead.
func (*RPCRequest) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{3}
}

func (x *RPCRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *RPCRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RPCRequest) GetPayloadBlob() []byte {
	if x != nil {
		return x.PayloadBlob
	}
	return nil
}

func (x *RPCRequest) GetPayloadText() string {
	if x != nil {
		return x.PayloadText
	}
	return ""
}

type RPCReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *v1.Error              `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	PayloadBlob   []byte                 `protobuf:"bytes,2,opt,name=payload_blob,proto3" json:"payload_blob,omitempty"`
	PayloadText   string                 `protobuf:"bytes,3,opt,name=payload_text,proto3" json:"payload_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RPCReply) Reset() {
	*x = RPCReply{}
	mi := &file_client_v1_client_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCReply) ProtoMessage() {}

func (x *RPCReply) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCReply.ProtoReflect.Descriptor instead.
func (*RPCReply) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{4}
}

func (x *RPCReply) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RPCReply) GetPayloadBlob() []byte {
	if x != nil {
		return x.PayloadBlob
	}
	return nil
}

func (x *RPCReply) GetPayloadText() string {
	if x != nil {
		return x.PayloadText
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Channel       string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Offset        uint64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	PayloadBlob   []byte                 `protobuf:"bytes,4,opt,name=payload_blob,proto3" json:"payload_blob,omitempty"`
	PayloadText   string                 `protobuf:"bytes,5,opt,name=payload_text,proto3" json:"payload_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_client_v1_client_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{5}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Message) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Message) GetPayloadBlob() []byte {
	if x != nil {
		return x.PayloadBlob
	}
	return nil
}

func (x *Message) GetPayloadText() string {
	if x != nil {
		return x.PayloadText
	}
	return ""
}

type Publication struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*Message             `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Publication) Reset() {
	*x = Publication{}
	mi := &file_client_v1_client_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{6}
}

func (x *Publication) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type Connected struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,proto3" json:"session_id,omitempty"`
	Subscriptions []*Subscription        `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Publications  []*Publication         `protobuf:"bytes,3,rep,name=publications,proto3" json:"publications,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connected) Reset() {
	*x = Connected{}
	mi := &file_client_v1_client_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connected) ProtoMessage() {}

func (x *Connected) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connected.ProtoReflect.Descriptor instead.
func (*Connected) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{7}
}

func (x *Connected) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Connected) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *Connected) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Ephemeral     bool                   `protobuf:"varint,2,opt,name=ephemeral,proto3" json:"ephemeral,omitempty"`
	Token         string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_client_v1_client_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{8}
}

func (x *Subscription) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Subscription) GetEphemeral() bool {
	if x != nil {
		return x.Ephemeral
	}
	return false
}

func (x *Subscription) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Subscribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*Subscription        `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscribe) Reset() {
	*x = Subscribe{}
	mi := &file_client_v1_client_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe) ProtoMessage() {}

func (x *Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe.ProtoReflect.Descriptor instead.
func (*Subscribe) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{9}
}

func (x *Subscribe) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type SubscribeAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*Subscription        `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeAck) Reset() {
	*x = SubscribeAck{}
	mi := &file_client_v1_client_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAck) ProtoMessage() {}

func (x *SubscribeAck) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAck.ProtoReflect.Descriptor instead.
func (*SubscribeAck) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{10}
}

func (x *SubscribeAck) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type Unsubscribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*Subscription        `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Unsubscribe) Reset() {
	*x = Unsubscribe{}
	mi := &file_client_v1_client_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Unsubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unsubscribe) ProtoMessage() {}

func (x *Unsubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unsubscribe.ProtoReflect.Descriptor instead.
func (*Unsubscribe) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{11}
}

func (x *Unsubscribe) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type UnsubscribeAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*Subscription        `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeAck) Reset() {
	*x = UnsubscribeAck{}
	mi := &file_client_v1_client_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeAck) ProtoMessage() {}

func (x *UnsubscribeAck) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeAck.ProtoReflect.Descriptor instead.
func (*UnsubscribeAck) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{12}
}

func (x *UnsubscribeAck) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type RefreshSub struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*Subscription        `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshSub) Reset() {
	*x = RefreshSub{}
	mi := &file_client_v1_client_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshSub) ProtoMessage() {}

func (x *RefreshSub) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshSub.ProtoReflect.Descriptor instead.
func (*RefreshSub) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{13}
}

func (x *RefreshSub) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_client_v1_client_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{14}
}

type Pong struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pong) Reset() {
	*x = Pong{}
	mi := &file_client_v1_client_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{15}
}

type Publish struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	PayloadBlob   []byte                 `protobuf:"bytes,2,opt,name=payload_blob,proto3" json:"payload_blob,omitempty"`
	PayloadText   string                 `protobuf:"bytes,3,opt,name=payload_text,proto3" json:"payload_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Publish) Reset() {
	*x = Publish{}
	mi := &file_client_v1_client_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Publish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publish) ProtoMessage() {}

func (x *Publish) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publish.ProtoReflect.Descriptor instead.
func (*Publish) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{16}
}

func (x *Publish) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Publish) GetPayloadBlob() []byte {
	if x != nil {
		return x.PayloadBlob
	}
	return nil
}

func (x *Publish) GetPayloadText() string {
	if x != nil {
		return x.PayloadText
	}
	return ""
}

type PublishAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Offset        uint64                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishAck) Reset() {
	*x = PublishAck{}
	mi := &file_client_v1_client_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishAck) ProtoMessage() {}

func (x *PublishAck) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishAck.ProtoReflect.Descriptor instead.
func (*PublishAck) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{17}
}

func (x *PublishAck) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PublishAck) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type SubRefresh struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channels      []string               `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubRefresh) Reset() {
	*x = SubRefresh{}
	mi := &file_client_v1_client_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRefresh) ProtoMessage() {}

func (x *SubRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRefresh.ProtoReflect.Descriptor instead.
func (*SubRefresh) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{18}
}

func (x *SubRefresh) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

type SubRefreshAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubRefreshAck) Reset() {
	*x = SubRefreshAck{}
	mi := &file_client_v1_client_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubRefreshAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRefreshAck) ProtoMessage() {}

func (x *SubRefreshAck) ProtoReflect() protoreflect.Message {
	mi := &file_client_v1_client_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRefreshAck.ProtoReflect.Descriptor instead.
func (*SubRefreshAck) Descriptor() ([]byte, []int) {
	return file_client_v1_client_proto_rawDescGZIP(), []int{19}
}

var File_client_v1_client_proto protoreflect.FileDescriptor

const file_client_v1_client_proto_rawDesc = "" +
	"\n" +
	"\x16client/v1/client.proto\x12\x15messageloop.client.v1\x1a\x16shared/v1/errors.proto\"\x8f\x05\n" +
	"\rClientMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12N\n" +
	"\bmetadata\x18\x02 \x03(\v22.messageloop.client.v1.ClientMessage.MetadataEntryR\bmetadata\x12\x12\n" +
	"\x04time\x18\x03 \x01(\x04R\x04time\x12:\n" +
	"\aconnect\x18\v \x01(\v2\x1e.messageloop.client.v1.ConnectH\x00R\aconnect\x12@\n" +
	"\tsubscribe\x18\f \x01(\v2 .messageloop.client.v1.SubscribeH\x00R\tsubscribe\x12F\n" +
	"\vunsubscribe\x18\r \x01(\v2\".messageloop.client.v1.UnsubscribeH\x00R\vunsubscribe\x12E\n" +
	"\vrpc_request\x18\x0e \x01(\v2!.messageloop.client.v1.RPCRequestH\x00R\vrpc_request\x121\n" +
	"\x04ping\x18\x0f \x01(\v2\x1b.messageloop.client.v1.PingH\x00R\x04ping\x12:\n" +
	"\apublish\x18\x10 \x01(\v2\x1e.messageloop.client.v1.PublishH\x00R\apublish\x12E\n" +
	"\vsub_refresh\x18\x11 \x01(\v2!.messageloop.client.v1.SubRefreshH\x00R\vsub_refresh\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\n" +
	"\n" +
	"\benvelope\"\xb9\x06\n" +
	"\rServerMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12N\n" +
	"\bmetadata\x18\x02 \x03(\v22.messageloop.client.v1.ServerMessage.MetadataEntryR\bmetadata\x12\x12\n" +
	"\x04time\x18\x03 \x01(\x04R\x04time\x124\n" +
	"\x05error\x18\v \x01(\v2\x1c.messageloop.shared.v1.ErrorH\x00R\x05error\x12@\n" +
	"\tconnected\x18\f \x01(\v2 .messageloop.client.v1.ConnectedH\x00R\tconnected\x12K\n" +
	"\rsubscribe_ack\x18\r \x01(\v2#.messageloop.client.v1.SubscribeAckH\x00R\rsubscribe_ack\x12Q\n" +
	"\x0funsubscribe_ack\x18\x0e \x01(\v2%.messageloop.client.v1.UnsubscribeAckH\x00R\x0funsubscribe_ack\x12?\n" +
	"\trpc_reply\x18\x0f \x01(\v2\x1f.messageloop.client.v1.RPCReplyH\x00R\trpc_reply\x121\n" +
	"\x04pong\x18\x10 \x01(\v2\x1b.messageloop.client.v1.PongH\x00R\x04pong\x12E\n" +
	"\vpublish_ack\x18\x11 \x01(\v2!.messageloop.client.v1.PublishAckH\x00R\vpublish_ack\x12F\n" +
	"\vpublication\x18\x12 \x01(\v2\".messageloop.client.v1.PublicationH\x00R\vpublication\x12P\n" +
	"\x0fsub_refresh_ack\x18\x13 \x01(\v2$.messageloop.client.v1.SubRefreshAckH\x00R\x0fsub_refresh_ack\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\n" +
	"\n" +
	"\benvelope\"\xc4\x01\n" +
	"\aConnect\x12\x1c\n" +
	"\tclient_id\x18\x01 \x01(\tR\tclient_id\x12 \n" +
	"\vclient_type\x18\x02 \x01(\tR\vclient_type\x12\x14\n" +
	"\x05token\x18\x03 \x01(\tR\x05token\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12I\n" +
	"\rsubscriptions\x18\x05 \x03(\v2#.messageloop.client.v1.SubscriptionR\rsubscriptions\"\x86\x01\n" +
	"\n" +
	"RPCRequest\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12\"\n" +
	"\fpayload_blob\x18\x04 \x01(\fR\fpayload_blob\x12\"\n" +
	"\fpayload_text\x18\x05 \x01(\tR\fpayload_text\"\x86\x01\n" +
	"\bRPCReply\x122\n" +
	"\x05error\x18\x01 \x01(\v2\x1c.messageloop.shared.v1.ErrorR\x05error\x12\"\n" +
	"\fpayload_blob\x18\x02 \x01(\fR\fpayload_blob\x12\"\n" +
	"\fpayload_text\x18\x03 \x01(\tR\fpayload_text\"\x93\x01\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x04R\x06offset\x12\"\n" +
	"\fpayload_blob\x18\x04 \x01(\fR\fpayload_blob\x12\"\n" +
	"\fpayload_text\x18\x05 \x01(\tR\fpayload_text\"I\n" +
	"\vPublication\x12:\n" +
	"\bmessages\x18\x03 \x03(\v2\x1e.messageloop.client.v1.MessageR\bmessages\"\xbe\x01\n" +
	"\tConnected\x12\x1e\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\n" +
	"session_id\x12I\n" +
	"\rsubscriptions\x18\x02 \x03(\v2#.messageloop.client.v1.SubscriptionR\rsubscriptions\x12F\n" +
	"\fpublications\x18\x03 \x03(\v2\".messageloop.client.v1.PublicationR\fpublications\"\\\n" +
	"\fSubscription\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\x12\x1c\n" +
	"\tephemeral\x18\x02 \x01(\bR\tephemeral\x12\x14\n" +
	"\x05token\x18\x03 \x01(\tR\x05token\"V\n" +
	"\tSubscribe\x12I\n" +
	"\rsubscriptions\x18\x01 \x03(\v2#.messageloop.client.v1.SubscriptionR\rsubscriptions\"Y\n" +
	"\fSubscribeAck\x12I\n" +
	"\rsubscriptions\x18\x01 \x03(\v2#.messageloop.client.v1.SubscriptionR\rsubscriptions\"X\n" +
	"\vUnsubscribe\x12I\n" +
	"\rsubscriptions\x18\x01 \x03(\v2#.messageloop.client.v1.SubscriptionR\rsubscriptions\"[\n" +
	"\x0eUnsubscribeAck\x12I\n" +
	"\rsubscriptions\x18\x01 \x03(\v2#.messageloop.client.v1.SubscriptionR\rsubscriptions\"W\n" +
	"\n" +
	"RefreshSub\x12I\n" +
	"\rsubscriptions\x18\x01 \x03(\v2#.messageloop.client.v1.SubscriptionR\rsubscriptions\"\x06\n" +
	"\x04Ping\"\x06\n" +
	"\x04Pong\"k\n" +
	"\aPublish\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\x12\"\n" +
	"\fpayload_blob\x18\x02 \x01(\fR\fpayload_blob\x12\"\n" +
	"\fpayload_text\x18\x03 \x01(\tR\fpayload_text\">\n" +
	"\n" +
	"PublishAck\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x04R\x06offset\"(\n" +
	"\n" +
	"SubRefresh\x12\x1a\n" +
	"\bchannels\x18\x01 \x03(\tR\bchannels\"\x0f\n" +
	"\rSubRefreshAck2s\n" +
	"\x12MessageLoopService\x12]\n" +
	"\vMessageLoop\x12$.messageloop.client.v1.ClientMessage\x1a$.messageloop.client.v1.ServerMessage(\x010\x01B\xec\x01\n" +
	"\x19com.messageloop.client.v1B\vClientProtoP\x01ZLgithub.com/deeplooplabs/messageloop-protocol/gen/proto/go/client/v1;clientv1\xa2\x02\x03MCX\xaa\x02\x15Messageloop.Client.V1\xca\x02\x15Messageloop\\Client\\V1\xe2\x02!Messageloop\\Client\\V1\\GPBMetadata\xea\x02\x17Messageloop::Client::V1b\x06proto3"

var (
	file_client_v1_client_proto_rawDescOnce sync.Once
	file_client_v1_client_proto_rawDescData []byte
)

func file_client_v1_client_proto_rawDescGZIP() []byte {
	file_client_v1_client_proto_rawDescOnce.Do(func() {
		file_client_v1_client_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_v1_client_proto_rawDesc), len(file_client_v1_client_proto_rawDesc)))
	})
	return file_client_v1_client_proto_rawDescData
}

var file_client_v1_client_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_client_v1_client_proto_goTypes = []any{
	(*ClientMessage)(nil),  // 0: messageloop.client.v1.ClientMessage
	(*ServerMessage)(nil),  // 1: messageloop.client.v1.ServerMessage
	(*Connect)(nil),        // 2: messageloop.client.v1.Connect
	(*RPCRequest)(nil),     // 3: messageloop.client.v1.RPCRequest
	(*RPCReply)(nil),       // 4: messageloop.client.v1.RPCReply
	(*Message)(nil),        // 5: messageloop.client.v1.Message
	(*Publication)(nil),    // 6: messageloop.client.v1.Publication
	(*Connected)(nil),      // 7: messageloop.client.v1.Connected
	(*Subscription)(nil),   // 8: messageloop.client.v1.Subscription
	(*Subscribe)(nil),      // 9: messageloop.client.v1.Subscribe
	(*SubscribeAck)(nil),   // 10: messageloop.client.v1.SubscribeAck
	(*Unsubscribe)(nil),    // 11: messageloop.client.v1.Unsubscribe
	(*UnsubscribeAck)(nil), // 12: messageloop.client.v1.UnsubscribeAck
	(*RefreshSub)(nil),     // 13: messageloop.client.v1.RefreshSub
	(*Ping)(nil),           // 14: messageloop.client.v1.Ping
	(*Pong)(nil),           // 15: messageloop.client.v1.Pong
	(*Publish)(nil),        // 16: messageloop.client.v1.Publish
	(*PublishAck)(nil),     // 17: messageloop.client.v1.PublishAck
	(*SubRefresh)(nil),     // 18: messageloop.client.v1.SubRefresh
	(*SubRefreshAck)(nil),  // 19: messageloop.client.v1.SubRefreshAck
	nil,                    // 20: messageloop.client.v1.ClientMessage.MetadataEntry
	nil,                    // 21: messageloop.client.v1.ServerMessage.MetadataEntry
	(*v1.Error)(nil),       // 22: messageloop.shared.v1.Error
}
var file_client_v1_client_proto_depIdxs = []int32{
	20, // 0: messageloop.client.v1.ClientMessage.metadata:type_name -> messageloop.client.v1.ClientMessage.MetadataEntry
	2,  // 1: messageloop.client.v1.ClientMessage.connect:type_name -> messageloop.client.v1.Connect
	9,  // 2: messageloop.client.v1.ClientMessage.subscribe:type_name -> messageloop.client.v1.Subscribe
	11, // 3: messageloop.client.v1.ClientMessage.unsubscribe:type_name -> messageloop.client.v1.Unsubscribe
	3,  // 4: messageloop.client.v1.ClientMessage.rpc_request:type_name -> messageloop.client.v1.RPCRequest
	14, // 5: messageloop.client.v1.ClientMessage.ping:type_name -> messageloop.client.v1.Ping
	16, // 6: messageloop.client.v1.ClientMessage.publish:type_name -> messageloop.client.v1.Publish
	18, // 7: messageloop.client.v1.ClientMessage.sub_refresh:type_name -> messageloop.client.v1.SubRefresh
	21, // 8: messageloop.client.v1.ServerMessage.metadata:type_name -> messageloop.client.v1.ServerMessage.MetadataEntry
	22, // 9: messageloop.client.v1.ServerMessage.error:type_name -> messageloop.shared.v1.Error
	7,  // 10: messageloop.client.v1.ServerMessage.connected:type_name -> messageloop.client.v1.Connected
	10, // 11: messageloop.client.v1.ServerMessage.subscribe_ack:type_name -> messageloop.client.v1.SubscribeAck
	12, // 12: messageloop.client.v1.ServerMessage.unsubscribe_ack:type_name -> messageloop.client.v1.UnsubscribeAck
	4,  // 13: messageloop.client.v1.ServerMessage.rpc_reply:type_name -> messageloop.client.v1.RPCReply
	15, // 14: messageloop.client.v1.ServerMessage.pong:type_name -> messageloop.client.v1.Pong
	17, // 15: messageloop.client.v1.ServerMessage.publish_ack:type_name -> messageloop.client.v1.PublishAck
	6,  // 16: messageloop.client.v1.ServerMessage.publication:type_name -> messageloop.client.v1.Publication
	19, // 17: messageloop.client.v1.ServerMessage.sub_refresh_ack:type_name -> messageloop.client.v1.SubRefreshAck
	8,  // 18: messageloop.client.v1.Connect.subscriptions:type_name -> messageloop.client.v1.Subscription
	22, // 19: messageloop.client.v1.RPCReply.error:type_name -> messageloop.shared.v1.Error
	5,  // 20: messageloop.client.v1.Publication.messages:type_name -> messageloop.client.v1.Message
	8,  // 21: messageloop.client.v1.Connected.subscriptions:type_name -> messageloop.client.v1.Subscription
	6,  // 22: messageloop.client.v1.Connected.publications:type_name -> messageloop.client.v1.Publication
	8,  // 23: messageloop.client.v1.Subscribe.subscriptions:type_name -> messageloop.client.v1.Subscription
	8,  // 24: messageloop.client.v1.SubscribeAck.subscriptions:type_name -> messageloop.client.v1.Subscription
	8,  // 25: messageloop.client.v1.Unsubscribe.subscriptions:type_name -> messageloop.client.v1.Subscription
	8,  // 26: messageloop.client.v1.UnsubscribeAck.subscriptions:type_name -> messageloop.client.v1.Subscription
	8,  // 27: messageloop.client.v1.RefreshSub.subscriptions:type_name -> messageloop.client.v1.Subscription
	0,  // 28: messageloop.client.v1.MessageLoopService.MessageLoop:input_type -> messageloop.client.v1.ClientMessage
	1,  // 29: messageloop.client.v1.MessageLoopService.MessageLoop:output_type -> messageloop.client.v1.ServerMessage
	29, // [29:30] is the sub-list for method output_type
	28, // [28:29] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_client_v1_client_proto_init() }
func file_client_v1_client_proto_init() {
	if File_client_v1_client_proto != nil {
		return
	}
	file_client_v1_client_proto_msgTypes[0].OneofWrappers = []any{
		(*ClientMessage_Connect)(nil),
		(*ClientMessage_Subscribe)(nil),
		(*ClientMessage_Unsubscribe)(nil),
		(*ClientMessage_RpcRequest)(nil),
		(*ClientMessage_Ping)(nil),
		(*ClientMessage_Publish)(nil),
		(*ClientMessage_SubRefresh)(nil),
	}
	file_client_v1_client_proto_msgTypes[1].OneofWrappers = []any{
		(*ServerMessage_Error)(nil),
		(*ServerMessage_Connected)(nil),
		(*ServerMessage_SubscribeAck)(nil),
		(*ServerMessage_UnsubscribeAck)(nil),
		(*ServerMessage_RpcReply)(nil),
		(*ServerMessage_Pong)(nil),
		(*ServerMessage_PublishAck)(nil),
		(*ServerMessage_Publication)(nil),
		(*ServerMessage_SubRefreshAck)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_v1_client_proto_rawDesc), len(file_client_v1_client_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_client_v1_client_proto_goTypes,
		DependencyIndexes: file_client_v1_client_proto_depIdxs,
		MessageInfos:      file_client_v1_client_proto_msgTypes,
	}.Build()
	File_client_v1_client_proto = out.File
	file_client_v1_client_proto_goTypes = nil
	file_client_v1_client_proto_depIdxs = nil
}
