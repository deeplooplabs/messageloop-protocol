syntax = "proto3";

package messageloop.proxy.v1;

option go_package = "github.com/deeplooplabs/messageloop-protocol/gen/proto/go/proxy/v1;proxypb";

import "shared/v1/errors.proto";

service ProxyService {
  // 远程调用
  rpc RPC(RPCRequest) returns(RPCReply);
  // 认证
  rpc Authenticate(AuthenticateRequest) returns(AuthenticateReply);
  // 订阅权限校验
  rpc SubscribeAcl(SubscribeAclRequest) returns(SubscribeAclReply);

  rpc OnConnected(OnConnectedRequest) returns (OnConnectedReply);

  rpc OnSubscribed(OnSubscribedRequest) returns (OnSubscribedReply);

  rpc OnUnsubscribed(OnUnsubscribedRequest) returns(OnUnsubscribedReply);

  rpc OnDisconnected(OnDisconnectedRequest) returns(OnDisconnectedReply);
}


message RPCRequest {
  string id = 1;
  string channel = 2;
  string method = 3;
  bytes payload_blob = 5;
  string payload_text = 6;
}

message RPCReply {
  string id = 1;
  shared.v1.Error error = 2;
  bytes payload_blob = 3;
  string payload_text = 4;
}

message AuthenticateRequest {
  string username = 1;
  string password = 2;
  string client_type = 3;
  string client_id = 4;
}

message AuthenticateReply {
  shared.v1.Error error = 1;
  UserInfo user_info = 2;
}

message UserInfo {
  string id = 1;
  string username = 2;
  string token = 3;
  string client_type = 4;
  string client_id = 5;
}

message SubscribeAclRequest {
  string channel = 1;
  string token = 2;
}

message SubscribeAclReply {

}

message OnConnectedRequest {
  string session_id = 1;
  string username = 2;
}

message OnConnectedReply{
}

message OnSubscribedRequest {

}
message OnSubscribedReply {

}

message OnUnsubscribedRequest {

}

message OnUnsubscribedReply {

}

message OnDisconnectedRequest {
  string session_id = 1;
  string username = 2;

}
message OnDisconnectedReply {

}
