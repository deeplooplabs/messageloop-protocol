syntax = "proto3";

package messageloop.client.v1;

option go_package = "github.com/deeplooplabs/messageloop-protocol/gen/proto/go/client/v1;clientpb";

import "shared/v1/errors.proto";

service MessageLoopService {
  // 核心双向数据流
  rpc MessageLoop(stream ClientMessage) returns (stream ServerMessage);
}

message ClientMessage {
  string id = 1;
  map<string, string> metadata = 2;
  uint64 time = 3;
  oneof envelope {
    Connect connect = 11;
    Subscribe subscribe = 12;
    Unsubscribe unsubscribe = 13;
    RPCRequest rpc_request = 14 [json_name = "rpc_request"];
    Ping ping = 15;
    Publish publish = 16;
    SubRefresh sub_refresh = 17 [json_name = "sub_refresh"];
  }
}

message ServerMessage {
  string id = 1;
  map<string, string> metadata = 2;
  uint64 time = 3;
  oneof envelope {
    messageloop.shared.v1.Error error = 11;
    Connected connected = 12;
    SubscribeAck subscribe_ack = 13 [json_name = "subscribe_ack"];
    UnsubscribeAck unsubscribe_ack = 14[json_name = "unsubscribe_ack"];
    RPCReply rpc_reply = 15 [json_name = "rpc_reply"];
    Pong pong = 16;
    PublishAck publish_ack = 17 [json_name = "publish_ack"];
    Publication publication = 18;
    SubRefreshAck sub_refresh_ack = 19 [json_name = "sub_refresh_ack"];
  }
}

message Connect {
  string client_id = 1 [json_name = "client_id"];
  string client_type = 2 [json_name = "client_type"];
  string token = 3;
  string version = 4;
  repeated Subscription subscriptions = 5;
}

message RPCRequest {
  string channel = 1;
  string method = 2;
  bytes payload_blob = 4 [json_name = "payload_blob"];
  string payload = 5 [json_name = "payload"];
}

message RPCReply {
  messageloop.shared.v1.Error error = 1;
  bytes payload_blob = 2 [json_name = "payload_blob"];
  string payload = 3 [json_name = "payload"];
}

message Message {
  string id = 1;
  string channel = 2;
  uint64 offset = 3;
  bytes payload_blob = 4 [json_name = "payload_blob"];
  string payload = 5 [json_name = "payload"];
}

message Publication {
  repeated Message messages = 3;
}

message Connected {
  string session_id = 1 [json_name = "session_id"];
  repeated Subscription subscriptions = 2;
  repeated Publication publications = 3;
}

message Subscription {
  string channel = 1;
  bool ephemeral = 2;
  string token = 3;
}

message Subscribe {
  repeated Subscription subscriptions = 1;
}

message SubscribeAck {
  repeated Subscription subscriptions = 1;
}

message Unsubscribe {
  repeated Subscription subscriptions = 1;
}

message UnsubscribeAck {
  repeated Subscription subscriptions = 1;
}

message RefreshSub {
  repeated Subscription subscriptions = 1;
}

message Ping {
}

message Pong {
}

message Publish {
  string channel = 1;
  bytes payload_blob = 2 [json_name = "payload_blob"];
  string payload = 3 [json_name = "payload"];
}

message PublishAck {
  string channel = 1;
  uint64 offset = 2;
}

message SubRefresh {
  repeated string channels = 1;
}

message SubRefreshAck {
}